{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../http-error-handler.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    Authorization: 'my-auth-token'\n  })\n};\nexport class HeroesService {\n  constructor(http, httpErrorHandler) {\n    this.http = http;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n    this.handleError = httpErrorHandler.createHandleError('HeroesService');\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(catchError(this.handleError('getHeroes', [])));\n  }\n  /* GET heroes whose name contains search term */\n  searchHeroes(term) {\n    term = term.trim();\n    // Add safe, URL encoded search parameter if there is a search term\n    const options = term ? {\n      params: new HttpParams().set('name', term)\n    } : {};\n    return this.http.get(this.heroesUrl, options).pipe(catchError(this.handleError('searchHeroes', [])));\n  }\n  //////// Save methods //////////\n  /** POST: add a new hero to the database */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, httpOptions).pipe(catchError(this.handleError('addHero', hero)));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(id) {\n    const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n    return this.http.delete(url, httpOptions).pipe(catchError(this.handleError('deleteHero')));\n  }\n  /** PUT: update the hero on the server. Returns the updated hero upon success. */\n  updateHero(hero) {\n    httpOptions.headers = httpOptions.headers.set('Authorization', 'my-new-auth-token');\n    return this.http.put(this.heroesUrl, hero, httpOptions).pipe(catchError(this.handleError('updateHero', hero)));\n  }\n  static #_ = this.ɵfac = function HeroesService_Factory(t) {\n    return new (t || HeroesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroesService,\n    factory: HeroesService.ɵfac\n  });\n}","map":{"version":3,"names":["HttpParams","HttpHeaders","catchError","httpOptions","headers","Authorization","HeroesService","constructor","http","httpErrorHandler","heroesUrl","handleError","createHandleError","getHeroes","get","pipe","searchHeroes","term","trim","options","params","set","addHero","hero","post","deleteHero","id","url","delete","updateHero","put","_","i0","ɵɵinject","i1","HttpClient","i2","HttpErrorHandler","_2","factory","ɵfac"],"sources":["c:\\brettaio\\ng-http\\src\\app\\heroes\\heroes.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\n\n\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { HttpErrorHandler, HandleError } from '../http-error-handler.service';\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type':  'application/json',\n    Authorization: 'my-auth-token'\n  })\n};\n\n@Injectable()\nexport class HeroesService {\n  heroesUrl = 'api/heroes';  // URL to web api\n  private handleError: HandleError;\n\n  constructor(\n    private http: HttpClient,\n    httpErrorHandler: HttpErrorHandler) {\n    this.handleError = httpErrorHandler.createHandleError('HeroesService');\n  }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        catchError(this.handleError('getHeroes', []))\n      );\n  }\n\n  /* GET heroes whose name contains search term */\n  searchHeroes(term: string): Observable<Hero[]> {\n    term = term.trim();\n\n    // Add safe, URL encoded search parameter if there is a search term\n    const options = term ?\n     { params: new HttpParams().set('name', term) } : {};\n\n    return this.http.get<Hero[]>(this.heroesUrl, options)\n      .pipe(\n        catchError(this.handleError<Hero[]>('searchHeroes', []))\n      );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new hero to the database */\n  addHero(hero: Hero): Observable<Hero> {\n    return this.http.post<Hero>(this.heroesUrl, hero, httpOptions)\n      .pipe(\n        catchError(this.handleError('addHero', hero))\n      );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero(id: number): Observable<unknown> {\n    const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n    return this.http.delete(url, httpOptions)\n      .pipe(\n        catchError(this.handleError('deleteHero'))\n      );\n  }\n\n  /** PUT: update the hero on the server. Returns the updated hero upon success. */\n  updateHero(hero: Hero): Observable<Hero> {\n    httpOptions.headers =\n      httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n    return this.http.put<Hero>(this.heroesUrl, hero, httpOptions)\n      .pipe(\n        catchError(this.handleError('updateHero', hero))\n      );\n  }\n}\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAASC,WAAW,QAAQ,sBAAsB;AAIlD,SAASC,UAAU,QAAQ,gBAAgB;;;;AAK3C,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IACvB,cAAc,EAAG,kBAAkB;IACnCI,aAAa,EAAE;GAChB;CACF;AAGD,OAAM,MAAOC,aAAa;EAIxBC,YACUC,IAAgB,EACxBC,gBAAkC;IAD1B,KAAAD,IAAI,GAAJA,IAAI;IAJd,KAAAE,SAAS,GAAG,YAAY,CAAC,CAAE;IAMzB,IAAI,CAACC,WAAW,GAAGF,gBAAgB,CAACG,iBAAiB,CAAC,eAAe,CAAC;EACxE;EAEA;EACAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAS,IAAI,CAACJ,SAAS,CAAC,CACzCK,IAAI,CACHb,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAC9C;EACL;EAEA;EACAK,YAAYA,CAACC,IAAY;IACvBA,IAAI,GAAGA,IAAI,CAACC,IAAI,EAAE;IAElB;IACA,MAAMC,OAAO,GAAGF,IAAI,GACnB;MAAEG,MAAM,EAAE,IAAIpB,UAAU,EAAE,CAACqB,GAAG,CAAC,MAAM,EAAEJ,IAAI;IAAC,CAAE,GAAG,EAAE;IAEpD,OAAO,IAAI,CAACT,IAAI,CAACM,GAAG,CAAS,IAAI,CAACJ,SAAS,EAAES,OAAO,CAAC,CAClDJ,IAAI,CACHb,UAAU,CAAC,IAAI,CAACS,WAAW,CAAS,cAAc,EAAE,EAAE,CAAC,CAAC,CACzD;EACL;EAEA;EAEA;EACAW,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAO,IAAI,CAACd,SAAS,EAAEa,IAAI,EAAEpB,WAAW,CAAC,CAC3DY,IAAI,CACHb,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,SAAS,EAAEY,IAAI,CAAC,CAAC,CAC9C;EACL;EAEA;EACAE,UAAUA,CAACC,EAAU;IACnB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACjB,SAAS,IAAIgB,EAAE,EAAE,CAAC,CAAC;IACvC,OAAO,IAAI,CAAClB,IAAI,CAACoB,MAAM,CAACD,GAAG,EAAExB,WAAW,CAAC,CACtCY,IAAI,CACHb,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,YAAY,CAAC,CAAC,CAC3C;EACL;EAEA;EACAkB,UAAUA,CAACN,IAAU;IACnBpB,WAAW,CAACC,OAAO,GACjBD,WAAW,CAACC,OAAO,CAACiB,GAAG,CAAC,eAAe,EAAE,mBAAmB,CAAC;IAE/D,OAAO,IAAI,CAACb,IAAI,CAACsB,GAAG,CAAO,IAAI,CAACpB,SAAS,EAAEa,IAAI,EAAEpB,WAAW,CAAC,CAC1DY,IAAI,CACHb,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,YAAY,EAAEY,IAAI,CAAC,CAAC,CACjD;EACL;EAAC,QAAAQ,CAAA,G;qBA5DUzB,aAAa,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,gBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbhC,aAAa;IAAAiC,OAAA,EAAbjC,aAAa,CAAAkC;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}