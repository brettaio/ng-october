{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nexport class RequestCache {}\nconst maxAge = 30000; // maximum cache age (ms)\nexport class RequestCacheWithMap {\n  constructor(messenger) {\n    this.messenger = messenger;\n    this.cache = new Map();\n  }\n  get(req) {\n    const url = req.urlWithParams;\n    const cached = this.cache.get(url);\n    if (!cached) {\n      return undefined;\n    }\n    const isExpired = cached.lastRead < Date.now() - maxAge;\n    const expired = isExpired ? 'expired ' : '';\n    this.messenger.add(`Found ${expired}cached response for \"${url}\".`);\n    return isExpired ? undefined : cached.response;\n  }\n  put(req, response) {\n    const url = req.urlWithParams;\n    this.messenger.add(`Caching response from \"${url}\".`);\n    const newEntry = {\n      url,\n      response,\n      lastRead: Date.now()\n    };\n    this.cache.set(url, newEntry);\n    // remove expired cache entries\n    const expired = Date.now() - maxAge;\n    this.cache.forEach(entry => {\n      if (entry.lastRead < expired) {\n        this.cache.delete(entry.url);\n      }\n    });\n    this.messenger.add(`Request cache size: ${this.cache.size}.`);\n  }\n  static #_ = this.ɵfac = function RequestCacheWithMap_Factory(t) {\n    return new (t || RequestCacheWithMap)(i0.ɵɵinject(i1.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RequestCacheWithMap,\n    factory: RequestCacheWithMap.ɵfac\n  });\n}","map":{"version":3,"names":["RequestCache","maxAge","RequestCacheWithMap","constructor","messenger","cache","Map","get","req","url","urlWithParams","cached","undefined","isExpired","lastRead","Date","now","expired","add","response","put","newEntry","set","forEach","entry","delete","size","_","i0","ɵɵinject","i1","MessageService","_2","factory","ɵfac"],"sources":["c:\\brettaio\\ng-http\\src\\app\\request-cache.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse } from '@angular/common/http';\n\nimport { MessageService } from './message.service';\n\nexport interface RequestCacheEntry {\n  url: string;\n  response: HttpResponse<any>;\n  lastRead: number;\n}\n\nexport abstract class RequestCache {\n  abstract get(req: HttpRequest<any>): HttpResponse<any> | undefined;\n  abstract put(req: HttpRequest<any>, response: HttpResponse<any>): void;\n}\n\nconst maxAge = 30000; // maximum cache age (ms)\n\n@Injectable()\nexport class RequestCacheWithMap implements RequestCache {\n\n  cache = new Map<string, RequestCacheEntry>();\n\n  constructor(private messenger: MessageService) { }\n\n  get(req: HttpRequest<any>): HttpResponse<any> | undefined {\n    const url = req.urlWithParams;\n    const cached = this.cache.get(url);\n\n    if (!cached) {\n      return undefined;\n    }\n\n    const isExpired = cached.lastRead < (Date.now() - maxAge);\n    const expired = isExpired ? 'expired ' : '';\n    this.messenger.add(\n      `Found ${expired}cached response for \"${url}\".`);\n    return isExpired ? undefined : cached.response;\n  }\n\n  put(req: HttpRequest<any>, response: HttpResponse<any>): void {\n    const url = req.urlWithParams;\n    this.messenger.add(`Caching response from \"${url}\".`);\n\n    const newEntry = { url, response, lastRead: Date.now() };\n    this.cache.set(url, newEntry);\n\n    // remove expired cache entries\n    const expired = Date.now() - maxAge;\n    this.cache.forEach(entry => {\n      if (entry.lastRead < expired) {\n        this.cache.delete(entry.url);\n      }\n    });\n\n    this.messenger.add(`Request cache size: ${this.cache.size}.`);\n  }\n}\n"],"mappings":";;AAWA,OAAM,MAAgBA,YAAY;AAKlC,MAAMC,MAAM,GAAG,KAAK,CAAC,CAAC;AAGtB,OAAM,MAAOC,mBAAmB;EAI9BC,YAAoBC,SAAyB;IAAzB,KAAAA,SAAS,GAATA,SAAS;IAF7B,KAAAC,KAAK,GAAG,IAAIC,GAAG,EAA6B;EAEK;EAEjDC,GAAGA,CAACC,GAAqB;IACvB,MAAMC,GAAG,GAAGD,GAAG,CAACE,aAAa;IAC7B,MAAMC,MAAM,GAAG,IAAI,CAACN,KAAK,CAACE,GAAG,CAACE,GAAG,CAAC;IAElC,IAAI,CAACE,MAAM,EAAE;MACX,OAAOC,SAAS;;IAGlB,MAAMC,SAAS,GAAGF,MAAM,CAACG,QAAQ,GAAIC,IAAI,CAACC,GAAG,EAAE,GAAGf,MAAO;IACzD,MAAMgB,OAAO,GAAGJ,SAAS,GAAG,UAAU,GAAG,EAAE;IAC3C,IAAI,CAACT,SAAS,CAACc,GAAG,CAChB,SAASD,OAAO,wBAAwBR,GAAG,IAAI,CAAC;IAClD,OAAOI,SAAS,GAAGD,SAAS,GAAGD,MAAM,CAACQ,QAAQ;EAChD;EAEAC,GAAGA,CAACZ,GAAqB,EAAEW,QAA2B;IACpD,MAAMV,GAAG,GAAGD,GAAG,CAACE,aAAa;IAC7B,IAAI,CAACN,SAAS,CAACc,GAAG,CAAC,0BAA0BT,GAAG,IAAI,CAAC;IAErD,MAAMY,QAAQ,GAAG;MAAEZ,GAAG;MAAEU,QAAQ;MAAEL,QAAQ,EAAEC,IAAI,CAACC,GAAG;IAAE,CAAE;IACxD,IAAI,CAACX,KAAK,CAACiB,GAAG,CAACb,GAAG,EAAEY,QAAQ,CAAC;IAE7B;IACA,MAAMJ,OAAO,GAAGF,IAAI,CAACC,GAAG,EAAE,GAAGf,MAAM;IACnC,IAAI,CAACI,KAAK,CAACkB,OAAO,CAACC,KAAK,IAAG;MACzB,IAAIA,KAAK,CAACV,QAAQ,GAAGG,OAAO,EAAE;QAC5B,IAAI,CAACZ,KAAK,CAACoB,MAAM,CAACD,KAAK,CAACf,GAAG,CAAC;;IAEhC,CAAC,CAAC;IAEF,IAAI,CAACL,SAAS,CAACc,GAAG,CAAC,uBAAuB,IAAI,CAACb,KAAK,CAACqB,IAAI,GAAG,CAAC;EAC/D;EAAC,QAAAC,CAAA,G;qBArCUzB,mBAAmB,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnB9B,mBAAmB;IAAA+B,OAAA,EAAnB/B,mBAAmB,CAAAgC;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}