{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../message.service\";\nexport class DownloaderService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n  }\n  getTextFile(filename) {\n    // The Observable returned by get() is of type Observable<string>\n    // because a text response was specified.\n    // There's no need to pass a <string> type parameter to get().\n    return this.http.get(filename, {\n      responseType: 'text'\n    }).pipe(tap(\n    // Log the result or error\n    {\n      next: data => this.log(filename, data),\n      error: error => this.logError(filename, error)\n    }));\n  }\n  log(filename, data) {\n    const message = `DownloaderService downloaded \"${filename}\" and got \"${data}\".`;\n    this.messageService.add(message);\n  }\n  logError(filename, error) {\n    const message = `DownloaderService failed to download \"${filename}\"; got error \"${error.message}\".`;\n    console.error(message);\n    this.messageService.add(message);\n  }\n  static #_ = this.ɵfac = function DownloaderService_Factory(t) {\n    return new (t || DownloaderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DownloaderService,\n    factory: DownloaderService.ɵfac\n  });\n}","map":{"version":3,"names":["tap","DownloaderService","constructor","http","messageService","getTextFile","filename","get","responseType","pipe","next","data","log","error","logError","message","add","console","_","i0","ɵɵinject","i1","HttpClient","i2","MessageService","_2","factory","ɵfac"],"sources":["c:\\brettaio\\ng-http\\src\\app\\downloader\\downloader.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { tap } from 'rxjs/operators';\n\nimport { MessageService } from '../message.service';\n\n@Injectable()\nexport class DownloaderService {\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  getTextFile(filename: string) {\n    // The Observable returned by get() is of type Observable<string>\n    // because a text response was specified.\n    // There's no need to pass a <string> type parameter to get().\n    return this.http.get(filename, {responseType: 'text'})\n      .pipe(\n        tap( // Log the result or error\n        {\n          next: (data) => this.log(filename, data),\n          error: (error) => this.logError(filename, error)\n        }\n        )\n      );\n  }\n\n  private log(filename: string, data: string) {\n    const message = `DownloaderService downloaded \"${filename}\" and got \"${data}\".`;\n    this.messageService.add(message);\n  }\n\n  private logError(filename: string, error: any) {\n    const message = `DownloaderService failed to download \"${filename}\"; got error \"${error.message}\".`;\n    console.error(message);\n    this.messageService.add(message);\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAKpC,OAAM,MAAOC,iBAAiB;EAC5BC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,cAAc,GAAdA,cAAc;EAAoB;EAE5CC,WAAWA,CAACC,QAAgB;IAC1B;IACA;IACA;IACA,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAACD,QAAQ,EAAE;MAACE,YAAY,EAAE;IAAM,CAAC,CAAC,CACnDC,IAAI,CACHT,GAAG;IAAE;IACL;MACEU,IAAI,EAAGC,IAAI,IAAK,IAAI,CAACC,GAAG,CAACN,QAAQ,EAAEK,IAAI,CAAC;MACxCE,KAAK,EAAGA,KAAK,IAAK,IAAI,CAACC,QAAQ,CAACR,QAAQ,EAAEO,KAAK;KAChD,CACA,CACF;EACL;EAEQD,GAAGA,CAACN,QAAgB,EAAEK,IAAY;IACxC,MAAMI,OAAO,GAAG,iCAAiCT,QAAQ,cAAcK,IAAI,IAAI;IAC/E,IAAI,CAACP,cAAc,CAACY,GAAG,CAACD,OAAO,CAAC;EAClC;EAEQD,QAAQA,CAACR,QAAgB,EAAEO,KAAU;IAC3C,MAAME,OAAO,GAAG,yCAAyCT,QAAQ,iBAAiBO,KAAK,CAACE,OAAO,IAAI;IACnGE,OAAO,CAACJ,KAAK,CAACE,OAAO,CAAC;IACtB,IAAI,CAACX,cAAc,CAACY,GAAG,CAACD,OAAO,CAAC;EAClC;EAAC,QAAAG,CAAA,G;qBA7BUjB,iBAAiB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBxB,iBAAiB;IAAAyB,OAAA,EAAjBzB,iBAAiB,CAAA0B;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}