{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\n// The JsonParser class acts as a base class for custom parsers and as the DI token.\nexport class JsonParser {\n  static #_ = this.ɵfac = function JsonParser_Factory(t) {\n    return new (t || JsonParser)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JsonParser,\n    factory: JsonParser.ɵfac\n  });\n}\nexport class CustomJsonInterceptor {\n  constructor(jsonParser) {\n    this.jsonParser = jsonParser;\n  }\n  intercept(httpRequest, next) {\n    if (httpRequest.responseType === 'json') {\n      // If the expected response type is JSON then handle it here.\n      return this.handleJsonResponse(httpRequest, next);\n    } else {\n      return next.handle(httpRequest);\n    }\n  }\n  handleJsonResponse(httpRequest, next) {\n    // Override the responseType to disable the default JSON parsing.\n    httpRequest = httpRequest.clone({\n      responseType: 'text'\n    });\n    // Handle the response using the custom parser.\n    return next.handle(httpRequest).pipe(map(event => this.parseJsonResponse(event)));\n  }\n  parseJsonResponse(event) {\n    if (event instanceof HttpResponse && typeof event.body === 'string') {\n      return event.clone({\n        body: this.jsonParser.parse(event.body)\n      });\n    } else {\n      return event;\n    }\n  }\n  static #_ = this.ɵfac = function CustomJsonInterceptor_Factory(t) {\n    return new (t || CustomJsonInterceptor)(i0.ɵɵinject(JsonParser));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomJsonInterceptor,\n    factory: CustomJsonInterceptor.ɵfac\n  });\n}\nexport class CustomJsonParser {\n  parse(text) {\n    return JSON.parse(text, dateReviver);\n  }\n  static #_ = this.ɵfac = function CustomJsonParser_Factory(t) {\n    return new (t || CustomJsonParser)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomJsonParser,\n    factory: CustomJsonParser.ɵfac\n  });\n}\nfunction dateReviver(key, value) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  const match = /^(\\d{4})-(\\d{1,2})-(\\d{1,2})$/.exec(value);\n  if (!match) {\n    return value;\n  }\n  return new Date(+match[1], +match[2] - 1, +match[3]);\n}","map":{"version":3,"names":["HttpResponse","map","JsonParser","_","_2","factory","ɵfac","CustomJsonInterceptor","constructor","jsonParser","intercept","httpRequest","next","responseType","handleJsonResponse","handle","clone","pipe","event","parseJsonResponse","body","parse","i0","ɵɵinject","CustomJsonParser","text","JSON","dateReviver","key","value","match","exec","Date"],"sources":["c:\\brettaio\\ng-http\\src\\app\\http-interceptors\\custom-json-interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\n// The JsonParser class acts as a base class for custom parsers and as the DI token.\n@Injectable()\nexport abstract class JsonParser {\n  abstract parse(text: string): any;\n}\n\n@Injectable()\nexport class CustomJsonInterceptor implements HttpInterceptor {\n  constructor(private jsonParser: JsonParser) {}\n\n  intercept(httpRequest: HttpRequest<any>, next: HttpHandler) {\n    if (httpRequest.responseType === 'json') {\n      // If the expected response type is JSON then handle it here.\n      return this.handleJsonResponse(httpRequest, next);\n    } else {\n      return next.handle(httpRequest);\n    }\n  }\n\n  private handleJsonResponse(httpRequest: HttpRequest<any>, next: HttpHandler) {\n    // Override the responseType to disable the default JSON parsing.\n    httpRequest = httpRequest.clone({responseType: 'text'});\n    // Handle the response using the custom parser.\n    return next.handle(httpRequest).pipe(map(event => this.parseJsonResponse(event)));\n  }\n\n  private parseJsonResponse(event: HttpEvent<any>) {\n    if (event instanceof HttpResponse && typeof event.body === 'string') {\n      return event.clone({body: this.jsonParser.parse(event.body)});\n    } else {\n      return event;\n    }\n  }\n}\n\n@Injectable()\nexport class CustomJsonParser implements JsonParser {\n  parse(text: string): any {\n    return JSON.parse(text, dateReviver);\n  }\n}\n\nfunction dateReviver(key: string, value: any) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  const match = /^(\\d{4})-(\\d{1,2})-(\\d{1,2})$/.exec(value);\n  if (!match) {\n    return value;\n  }\n  return new Date(+match[1], +match[2] - 1, +match[3]);\n}\n"],"mappings":"AAAA,SAA+DA,YAAY,QAAQ,sBAAsB;AAEzG,SAASC,GAAG,QAAQ,gBAAgB;;AAEpC;AAEA,OAAM,MAAgBC,UAAU;EAAA,QAAAC,CAAA,G;qBAAVD,UAAU;EAAA;EAAA,QAAAE,EAAA,G;WAAVF,UAAU;IAAAG,OAAA,EAAVH,UAAU,CAAAI;EAAA;;AAKhC,OAAM,MAAOC,qBAAqB;EAChCC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE7CC,SAASA,CAACC,WAA6B,EAAEC,IAAiB;IACxD,IAAID,WAAW,CAACE,YAAY,KAAK,MAAM,EAAE;MACvC;MACA,OAAO,IAAI,CAACC,kBAAkB,CAACH,WAAW,EAAEC,IAAI,CAAC;KAClD,MAAM;MACL,OAAOA,IAAI,CAACG,MAAM,CAACJ,WAAW,CAAC;;EAEnC;EAEQG,kBAAkBA,CAACH,WAA6B,EAAEC,IAAiB;IACzE;IACAD,WAAW,GAAGA,WAAW,CAACK,KAAK,CAAC;MAACH,YAAY,EAAE;IAAM,CAAC,CAAC;IACvD;IACA,OAAOD,IAAI,CAACG,MAAM,CAACJ,WAAW,CAAC,CAACM,IAAI,CAAChB,GAAG,CAACiB,KAAK,IAAI,IAAI,CAACC,iBAAiB,CAACD,KAAK,CAAC,CAAC,CAAC;EACnF;EAEQC,iBAAiBA,CAACD,KAAqB;IAC7C,IAAIA,KAAK,YAAYlB,YAAY,IAAI,OAAOkB,KAAK,CAACE,IAAI,KAAK,QAAQ,EAAE;MACnE,OAAOF,KAAK,CAACF,KAAK,CAAC;QAACI,IAAI,EAAE,IAAI,CAACX,UAAU,CAACY,KAAK,CAACH,KAAK,CAACE,IAAI;MAAC,CAAC,CAAC;KAC9D,MAAM;MACL,OAAOF,KAAK;;EAEhB;EAAC,QAAAf,CAAA,G;qBAzBUI,qBAAqB,EAAAe,EAAA,CAAAC,QAAA,CAAArB,UAAA;EAAA;EAAA,QAAAE,EAAA,G;WAArBG,qBAAqB;IAAAF,OAAA,EAArBE,qBAAqB,CAAAD;EAAA;;AA6BlC,OAAM,MAAOkB,gBAAgB;EAC3BH,KAAKA,CAACI,IAAY;IAChB,OAAOC,IAAI,CAACL,KAAK,CAACI,IAAI,EAAEE,WAAW,CAAC;EACtC;EAAC,QAAAxB,CAAA,G;qBAHUqB,gBAAgB;EAAA;EAAA,QAAApB,EAAA,G;WAAhBoB,gBAAgB;IAAAnB,OAAA,EAAhBmB,gBAAgB,CAAAlB;EAAA;;AAM7B,SAASqB,WAAWA,CAACC,GAAW,EAAEC,KAAU;EAC1C,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;;EAEd,MAAMC,KAAK,GAAG,+BAA+B,CAACC,IAAI,CAACF,KAAK,CAAC;EACzD,IAAI,CAACC,KAAK,EAAE;IACV,OAAOD,KAAK;;EAEd,OAAO,IAAIG,IAAI,CAAC,CAACF,KAAK,CAAC,CAAC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;AACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}