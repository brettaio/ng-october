{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\n/** Handles HttpClient errors */\nexport class HttpErrorHandler {\n  constructor(messageService) {\n    this.messageService = messageService;\n    /** Create curried handleError function that already knows the service name */\n    this.createHandleError = (serviceName = '') => (operation = 'operation', result = {}) => this.handleError(serviceName, operation, result);\n  }\n  /**\r\n   * Returns a function that handles Http operation failures.\r\n   * This error handler lets the app continue to run as if no error occurred.\r\n   *\r\n   * @param serviceName = name of the data service that attempted the operation\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\n  handleError(serviceName = '', operation = 'operation', result = {}) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      const message = error.error instanceof ErrorEvent ? error.error.message : `server returned code ${error.status} with body \"${error.error}\"`;\n      // TODO: better job of transforming error for user consumption\n      this.messageService.add(`${serviceName}: ${operation} failed: ${message}`);\n      // Let the app keep running by returning a safe result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function HttpErrorHandler_Factory(t) {\n    return new (t || HttpErrorHandler)(i0.ɵɵinject(i1.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorHandler,\n    factory: HttpErrorHandler.ɵfac\n  });\n}","map":{"version":3,"names":["of","HttpErrorHandler","constructor","messageService","createHandleError","serviceName","operation","result","handleError","error","console","message","ErrorEvent","status","add","_","i0","ɵɵinject","i1","MessageService","_2","factory","ɵfac"],"sources":["c:\\brettaio\\ng-http\\src\\app\\http-error-handler.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\n\nimport { MessageService } from './message.service';\n\n/** Type of the handleError function returned by HttpErrorHandler.createHandleError */\nexport type HandleError =\n  <T> (operation?: string, result?: T) => (error: HttpErrorResponse) => Observable<T>;\n\n/** Handles HttpClient errors */\n@Injectable()\nexport class HttpErrorHandler {\n  constructor(private messageService: MessageService) { }\n\n  /** Create curried handleError function that already knows the service name */\n  createHandleError = (serviceName = '') =>\n    <T>(operation = 'operation', result = {} as T) =>\n      this.handleError(serviceName, operation, result);\n\n  /**\n   * Returns a function that handles Http operation failures.\n   * This error handler lets the app continue to run as if no error occurred.\n   *\n   * @param serviceName = name of the data service that attempted the operation\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError<T>(serviceName = '', operation = 'operation', result = {} as T) {\n\n    return (error: HttpErrorResponse): Observable<T> => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      const message = (error.error instanceof ErrorEvent) ?\n        error.error.message :\n       `server returned code ${error.status} with body \"${error.error}\"`;\n\n      // TODO: better job of transforming error for user consumption\n      this.messageService.add(`${serviceName}: ${operation} failed: ${message}`);\n\n      // Let the app keep running by returning a safe result.\n      return of( result );\n    };\n\n  }\n}\n"],"mappings":"AAGA,SAAqBA,EAAE,QAAQ,MAAM;;;AAQrC;AAEA,OAAM,MAAOC,gBAAgB;EAC3BC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IAElC;IACA,KAAAC,iBAAiB,GAAG,CAACC,WAAW,GAAG,EAAE,KACnC,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAA,GAAS,EAAO,KAC3C,IAAI,CAACC,WAAW,CAACH,WAAW,EAAEC,SAAS,EAAEC,MAAM,CAAC;EALE;EAOtD;;;;;;;;EAQAC,WAAWA,CAAIH,WAAW,GAAG,EAAE,EAAEC,SAAS,GAAG,WAAW,EAAEC,MAAA,GAAS,EAAO;IAExE,OAAQE,KAAwB,IAAmB;MACjD;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB,MAAME,OAAO,GAAIF,KAAK,CAACA,KAAK,YAAYG,UAAU,GAChDH,KAAK,CAACA,KAAK,CAACE,OAAO,GACpB,wBAAwBF,KAAK,CAACI,MAAM,eAAeJ,KAAK,CAACA,KAAK,GAAG;MAElE;MACA,IAAI,CAACN,cAAc,CAACW,GAAG,CAAC,GAAGT,WAAW,KAAKC,SAAS,YAAYK,OAAO,EAAE,CAAC;MAE1E;MACA,OAAOX,EAAE,CAAEO,MAAM,CAAE;IACrB,CAAC;EAEH;EAAC,QAAAQ,CAAA,G;qBAjCUd,gBAAgB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBnB,gBAAgB;IAAAoB,OAAA,EAAhBpB,gBAAgB,CAAAqB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}