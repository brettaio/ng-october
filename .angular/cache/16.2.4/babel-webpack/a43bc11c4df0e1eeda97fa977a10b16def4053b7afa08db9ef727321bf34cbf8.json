{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    this.configUrl = 'assets/config.json';\n  }\n  getConfig() {\n    return this.http.get(this.configUrl).pipe(retry(3),\n    // retry a failed request up to 3 times\n    catchError(this.handleError) // then handle the error\n    );\n  }\n\n  getConfig_1() {\n    return this.http.get(this.configUrl);\n  }\n  getConfig_2() {\n    // now returns an Observable of Config\n    return this.http.get(this.configUrl);\n  }\n  getConfig_3() {\n    return this.http.get(this.configUrl).pipe(catchError(this.handleError));\n  }\n  getConfigResponse() {\n    return this.http.get(this.configUrl, {\n      observe: 'response'\n    });\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n  makeIntentionalError() {\n    return this.http.get('not/a/real/url').pipe(catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function ConfigService_Factory(t) {\n    return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigService,\n    factory: ConfigService.ɵfac\n  });\n}","map":{"version":3,"names":["throwError","catchError","retry","ConfigService","constructor","http","configUrl","getConfig","get","pipe","handleError","getConfig_1","getConfig_2","getConfig_3","getConfigResponse","observe","error","status","console","Error","makeIntentionalError","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["c:\\brettaio\\ng-http\\src\\app\\config\\config.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\nexport interface Config {\n  heroesUrl: string;\n  textfile: string;\n  date: any;\n}\n\n@Injectable()\nexport class ConfigService {\n  configUrl = 'assets/config.json';\n\n  constructor(private http: HttpClient) { }\n\n  getConfig() {\n    return this.http.get<Config>(this.configUrl)\n      .pipe(\n        retry(3), // retry a failed request up to 3 times\n        catchError(this.handleError) // then handle the error\n      );\n  }\n\n  getConfig_1() {\n    return this.http.get<Config>(this.configUrl);\n  }\n\n  getConfig_2() {\n    // now returns an Observable of Config\n    return this.http.get<Config>(this.configUrl);\n  }\n\n  getConfig_3() {\n    return this.http.get<Config>(this.configUrl)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getConfigResponse(): Observable<HttpResponse<Config>> {\n    return this.http.get<Config>(\n      this.configUrl, { observe: 'response' });\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n\n  makeIntentionalError() {\n    return this.http.get('not/a/real/url')\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n}\n"],"mappings":"AAIA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,KAAK,QAAQ,gBAAgB;;;AASlD,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,SAAS,GAAG,oBAAoB;EAEQ;EAExCC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,SAAS,CAAC,CACzCG,IAAI,CACHP,KAAK,CAAC,CAAC,CAAC;IAAE;IACVD,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;KAC9B;EACL;;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACN,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,SAAS,CAAC;EAC9C;EAEAM,WAAWA,CAAA;IACT;IACA,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,SAAS,CAAC;EAC9C;EAEAO,WAAWA,CAAA;IACT,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,SAAS,CAAC,CACzCG,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAI,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAClB,IAAI,CAACF,SAAS,EAAE;MAAES,OAAO,EAAE;IAAU,CAAE,CAAC;EAC5C;EAEQL,WAAWA,CAACM,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACAC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAE,OAAO,CAACF,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOhB,UAAU,CAAC,MAAM,IAAImB,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;EAEAC,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACf,IAAI,CAACG,GAAG,CAAC,gBAAgB,CAAC,CACnCC,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAAC,QAAAW,CAAA,G;qBArDUlB,aAAa,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbvB,aAAa;IAAAwB,OAAA,EAAbxB,aAAa,CAAAyB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}