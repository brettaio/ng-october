{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport class AuthInterceptor {\n  constructor(auth) {\n    this.auth = auth;\n  }\n  intercept(req, next) {\n    // Get the auth token from the service.\n    const authToken = this.auth.getAuthorizationToken();\n    /*\r\n    * The verbose way:\r\n    // Clone the request and replace the original headers with\r\n    // cloned headers, updated with the authorization.\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('Authorization', authToken)\r\n    });\r\n    */\n    // Clone the request and set the new header in one step.\n    const authReq = req.clone({\n      setHeaders: {\n        Authorization: authToken\n      }\n    });\n    // send cloned request with header to the next handler.\n    return next.handle(authReq);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["AuthInterceptor","constructor","auth","intercept","req","next","authToken","getAuthorizationToken","authReq","clone","setHeaders","Authorization","handle","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac"],"sources":["c:\\brettaio\\ng-http\\src\\app\\http-interceptors\\auth-interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest\n} from '@angular/common/http';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private auth: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    // Get the auth token from the service.\n    const authToken = this.auth.getAuthorizationToken();\n\n    /*\n    * The verbose way:\n    // Clone the request and replace the original headers with\n    // cloned headers, updated with the authorization.\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', authToken)\n    });\n    */\n    // Clone the request and set the new header in one step.\n    const authReq = req.clone({ setHeaders: { Authorization: authToken } });\n\n    // send cloned request with header to the next handler.\n    return next.handle(authReq);\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,eAAe;EAE1BC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD;IACA,MAAMC,SAAS,GAAG,IAAI,CAACJ,IAAI,CAACK,qBAAqB,EAAE;IAEnD;;;;;;;;IAQA;IACA,MAAMC,OAAO,GAAGJ,GAAG,CAACK,KAAK,CAAC;MAAEC,UAAU,EAAE;QAAEC,aAAa,EAAEL;MAAS;IAAE,CAAE,CAAC;IAEvE;IACA,OAAOD,IAAI,CAACO,MAAM,CAACJ,OAAO,CAAC;EAC7B;EAAC,QAAAK,CAAA,G;qBArBUb,eAAe,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAflB,eAAe;IAAAmB,OAAA,EAAfnB,eAAe,CAAAoB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}